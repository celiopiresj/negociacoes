{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","console","log","target","result","_createStores","onsuccess","bind","onerror","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,kBAAMA,SAAS,CAAC,aAAD,CAAf;AACA,gBAAIC,aAAa,IAAjB;AACA,gBAAIC,QAAQ,IAAZ;;AAEO,kBAAMC,iBAAN,CAAwB;AACvBC,8BAAc;AACV,0BAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;AAED,uBAAOC,aAAP,GAAuB;AACnB,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,4BAAIR,UAAJ,EAAgB,OAAOO,QAAQP,UAAR,CAAP;;AAEhB,8BAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,oCAAYG,eAAZ,GAA8BC,KAAK;AAC/BC,oCAAQC,GAAR,CAAYF,EAAEG,MAAF,CAASC,MAArB;AACAf,8CAAkBgB,aAAlB,CAAgCL,EAAEG,MAAF,CAASC,MAAzC;AACH,yBAHD;;AAKAR,oCAAYU,SAAZ,GAAwBN,KAAK;AACzBb,yCAAaa,EAAEG,MAAF,CAASC,MAAtB;AACAhB,oCAAQD,WAAWC,KAAX,CAAiBmB,IAAjB,CAAsBpB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,MAAM;AACrB,sCAAM,IAAIG,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGAG,oCAAQP,UAAR;AACH,yBAPD;;AASAS,oCAAYY,OAAZ,GAAsBR,KAAK;AACvBC,oCAAQC,GAAR,CAAYF,EAAEG,MAAF,CAASM,KAArB;AACAd,mCAAOK,EAAEG,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,yBAHD;AAKH,qBAzBM,CAAP;AA0BH;;AAED,uBAAOL,aAAP,CAAqBlB,UAArB,EAAiC;;AAE7BD,2BAAOyB,OAAP,CAAeC,SAAS;;AAEpBX,gCAAQC,GAAR,CAAYU,KAAZ;AACA,4BAAIzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACIzB,WAAW4B,iBAAX,CAA6BH,KAA7B;;AAEJzB,mCAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AAEH,qBARD;AASH;;AAED,uBAAOC,eAAP,GAAyB;AACrB,wBAAI/B,UAAJ,EAAgB;AACZC;AACH;AACJ;AAnDsB","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nlet connection = null;\r\nlet close = null;\r\n    \r\nexport class ConnectionFactory {\r\n        constructor() {\r\n            throw new Error('Não é possível criar instâncas dessa classe')\r\n        }\r\n    \r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n\r\n                if (connection) return resolve(connection);\r\n    \r\n                const openRequest = indexedDB.open('jscangaceiro', 1);\r\n             \r\n                openRequest.onupgradeneeded = e => {\r\n                    console.log(e.target.result)\r\n                    ConnectionFactory._createStores(e.target.result)\r\n                };\r\n    \r\n                openRequest.onsuccess = e => {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = () => {\r\n                        throw new Error('Você não pode fechar diretamente a conexão')\r\n                    }\r\n                    resolve(connection)\r\n                };\r\n    \r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error)\r\n                    reject(e.target.error.name)\r\n                };\r\n    \r\n            })\r\n        }\r\n    \r\n        static _createStores(connection) {\r\n\r\n            stores.forEach(store => {\r\n\r\n                console.log(store)\r\n                if (connection.objectStoreNames.contains(store)) \r\n                    connection.deleteObjectStore(store);\r\n\r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n                \r\n            })\r\n        }\r\n\r\n        static closeConnection() {\r\n            if (connection) {\r\n                close();\r\n            }\r\n        }\r\n    }"]}